// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcs_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gcs_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gcs_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gcs_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gcs_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gcs_5fdata_2eproto;
class GCSData;
class GCSDataDefaultTypeInternal;
extern GCSDataDefaultTypeInternal _GCSData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GCSData* Arena::CreateMaybeMessage<::GCSData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Flaps : int {
  LANDING = 0,
  TAKEOFF = 1,
  CRUISE = 2,
  Flaps_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Flaps_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Flaps_IsValid(int value);
constexpr Flaps Flaps_MIN = LANDING;
constexpr Flaps Flaps_MAX = CRUISE;
constexpr int Flaps_ARRAYSIZE = Flaps_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Flaps_descriptor();
template<typename T>
inline const std::string& Flaps_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Flaps>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Flaps_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Flaps_descriptor(), enum_t_value);
}
inline bool Flaps_Parse(
    const std::string& name, Flaps* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Flaps>(
    Flaps_descriptor(), name, value);
}
enum Mode : int {
  MANUAL = 0,
  AUTO = 1,
  Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Mode_IsValid(int value);
constexpr Mode Mode_MIN = MANUAL;
constexpr Mode Mode_MAX = AUTO;
constexpr int Mode_ARRAYSIZE = Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mode_descriptor();
template<typename T>
inline const std::string& Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Mode_descriptor(), enum_t_value);
}
inline bool Mode_Parse(
    const std::string& name, Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Mode>(
    Mode_descriptor(), name, value);
}
// ===================================================================

class GCSData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GCSData) */ {
 public:
  inline GCSData() : GCSData(nullptr) {};
  virtual ~GCSData();

  GCSData(const GCSData& from);
  GCSData(GCSData&& from) noexcept
    : GCSData() {
    *this = ::std::move(from);
  }

  inline GCSData& operator=(const GCSData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GCSData& operator=(GCSData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GCSData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GCSData* internal_default_instance() {
    return reinterpret_cast<const GCSData*>(
               &_GCSData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GCSData& a, GCSData& b) {
    a.Swap(&b);
  }
  inline void Swap(GCSData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GCSData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GCSData* New() const final {
    return CreateMaybeMessage<GCSData>(nullptr);
  }

  GCSData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GCSData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GCSData& from);
  void MergeFrom(const GCSData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GCSData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GCSData";
  }
  protected:
  explicit GCSData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gcs_5fdata_2eproto);
    return ::descriptor_table_gcs_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThrottle1FieldNumber = 1,
    kThrottle2FieldNumber = 2,
    kPitchFieldNumber = 3,
    kRollFieldNumber = 4,
    kYawFieldNumber = 5,
    kFlapsFieldNumber = 6,
    kModeFieldNumber = 7,
    kTargetAltitudeFieldNumber = 8,
    kTargetSpeedFieldNumber = 9,
    kTargetVerticalSpeedFieldNumber = 10,
    kTargetBankFieldNumber = 11,
  };
  // float throttle_1 = 1;
  void clear_throttle_1();
  float throttle_1() const;
  void set_throttle_1(float value);
  private:
  float _internal_throttle_1() const;
  void _internal_set_throttle_1(float value);
  public:

  // float throttle_2 = 2;
  void clear_throttle_2();
  float throttle_2() const;
  void set_throttle_2(float value);
  private:
  float _internal_throttle_2() const;
  void _internal_set_throttle_2(float value);
  public:

  // float pitch = 3;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float roll = 4;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float yaw = 5;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // .Flaps flaps = 6;
  void clear_flaps();
  ::Flaps flaps() const;
  void set_flaps(::Flaps value);
  private:
  ::Flaps _internal_flaps() const;
  void _internal_set_flaps(::Flaps value);
  public:

  // .Mode mode = 7;
  void clear_mode();
  ::Mode mode() const;
  void set_mode(::Mode value);
  private:
  ::Mode _internal_mode() const;
  void _internal_set_mode(::Mode value);
  public:

  // int32 target_altitude = 8;
  void clear_target_altitude();
  ::PROTOBUF_NAMESPACE_ID::int32 target_altitude() const;
  void set_target_altitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_altitude() const;
  void _internal_set_target_altitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 target_speed = 9;
  void clear_target_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 target_speed() const;
  void set_target_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_speed() const;
  void _internal_set_target_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 target_vertical_speed = 10;
  void clear_target_vertical_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 target_vertical_speed() const;
  void set_target_vertical_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_vertical_speed() const;
  void _internal_set_target_vertical_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 target_bank = 11;
  void clear_target_bank();
  ::PROTOBUF_NAMESPACE_ID::int32 target_bank() const;
  void set_target_bank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_bank() const;
  void _internal_set_target_bank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GCSData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float throttle_1_;
  float throttle_2_;
  float pitch_;
  float roll_;
  float yaw_;
  int flaps_;
  int mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_altitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_vertical_speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_bank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gcs_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GCSData

// float throttle_1 = 1;
inline void GCSData::clear_throttle_1() {
  throttle_1_ = 0;
}
inline float GCSData::_internal_throttle_1() const {
  return throttle_1_;
}
inline float GCSData::throttle_1() const {
  // @@protoc_insertion_point(field_get:GCSData.throttle_1)
  return _internal_throttle_1();
}
inline void GCSData::_internal_set_throttle_1(float value) {
  
  throttle_1_ = value;
}
inline void GCSData::set_throttle_1(float value) {
  _internal_set_throttle_1(value);
  // @@protoc_insertion_point(field_set:GCSData.throttle_1)
}

// float throttle_2 = 2;
inline void GCSData::clear_throttle_2() {
  throttle_2_ = 0;
}
inline float GCSData::_internal_throttle_2() const {
  return throttle_2_;
}
inline float GCSData::throttle_2() const {
  // @@protoc_insertion_point(field_get:GCSData.throttle_2)
  return _internal_throttle_2();
}
inline void GCSData::_internal_set_throttle_2(float value) {
  
  throttle_2_ = value;
}
inline void GCSData::set_throttle_2(float value) {
  _internal_set_throttle_2(value);
  // @@protoc_insertion_point(field_set:GCSData.throttle_2)
}

// float pitch = 3;
inline void GCSData::clear_pitch() {
  pitch_ = 0;
}
inline float GCSData::_internal_pitch() const {
  return pitch_;
}
inline float GCSData::pitch() const {
  // @@protoc_insertion_point(field_get:GCSData.pitch)
  return _internal_pitch();
}
inline void GCSData::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void GCSData::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:GCSData.pitch)
}

// float roll = 4;
inline void GCSData::clear_roll() {
  roll_ = 0;
}
inline float GCSData::_internal_roll() const {
  return roll_;
}
inline float GCSData::roll() const {
  // @@protoc_insertion_point(field_get:GCSData.roll)
  return _internal_roll();
}
inline void GCSData::_internal_set_roll(float value) {
  
  roll_ = value;
}
inline void GCSData::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:GCSData.roll)
}

// float yaw = 5;
inline void GCSData::clear_yaw() {
  yaw_ = 0;
}
inline float GCSData::_internal_yaw() const {
  return yaw_;
}
inline float GCSData::yaw() const {
  // @@protoc_insertion_point(field_get:GCSData.yaw)
  return _internal_yaw();
}
inline void GCSData::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void GCSData::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:GCSData.yaw)
}

// .Flaps flaps = 6;
inline void GCSData::clear_flaps() {
  flaps_ = 0;
}
inline ::Flaps GCSData::_internal_flaps() const {
  return static_cast< ::Flaps >(flaps_);
}
inline ::Flaps GCSData::flaps() const {
  // @@protoc_insertion_point(field_get:GCSData.flaps)
  return _internal_flaps();
}
inline void GCSData::_internal_set_flaps(::Flaps value) {
  
  flaps_ = value;
}
inline void GCSData::set_flaps(::Flaps value) {
  _internal_set_flaps(value);
  // @@protoc_insertion_point(field_set:GCSData.flaps)
}

// .Mode mode = 7;
inline void GCSData::clear_mode() {
  mode_ = 0;
}
inline ::Mode GCSData::_internal_mode() const {
  return static_cast< ::Mode >(mode_);
}
inline ::Mode GCSData::mode() const {
  // @@protoc_insertion_point(field_get:GCSData.mode)
  return _internal_mode();
}
inline void GCSData::_internal_set_mode(::Mode value) {
  
  mode_ = value;
}
inline void GCSData::set_mode(::Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:GCSData.mode)
}

// int32 target_altitude = 8;
inline void GCSData::clear_target_altitude() {
  target_altitude_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GCSData::_internal_target_altitude() const {
  return target_altitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GCSData::target_altitude() const {
  // @@protoc_insertion_point(field_get:GCSData.target_altitude)
  return _internal_target_altitude();
}
inline void GCSData::_internal_set_target_altitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_altitude_ = value;
}
inline void GCSData::set_target_altitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_altitude(value);
  // @@protoc_insertion_point(field_set:GCSData.target_altitude)
}

// int32 target_speed = 9;
inline void GCSData::clear_target_speed() {
  target_speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GCSData::_internal_target_speed() const {
  return target_speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GCSData::target_speed() const {
  // @@protoc_insertion_point(field_get:GCSData.target_speed)
  return _internal_target_speed();
}
inline void GCSData::_internal_set_target_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_speed_ = value;
}
inline void GCSData::set_target_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_speed(value);
  // @@protoc_insertion_point(field_set:GCSData.target_speed)
}

// int32 target_vertical_speed = 10;
inline void GCSData::clear_target_vertical_speed() {
  target_vertical_speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GCSData::_internal_target_vertical_speed() const {
  return target_vertical_speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GCSData::target_vertical_speed() const {
  // @@protoc_insertion_point(field_get:GCSData.target_vertical_speed)
  return _internal_target_vertical_speed();
}
inline void GCSData::_internal_set_target_vertical_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_vertical_speed_ = value;
}
inline void GCSData::set_target_vertical_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_vertical_speed(value);
  // @@protoc_insertion_point(field_set:GCSData.target_vertical_speed)
}

// int32 target_bank = 11;
inline void GCSData::clear_target_bank() {
  target_bank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GCSData::_internal_target_bank() const {
  return target_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GCSData::target_bank() const {
  // @@protoc_insertion_point(field_get:GCSData.target_bank)
  return _internal_target_bank();
}
inline void GCSData::_internal_set_target_bank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_bank_ = value;
}
inline void GCSData::set_target_bank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_bank(value);
  // @@protoc_insertion_point(field_set:GCSData.target_bank)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Flaps> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Flaps>() {
  return ::Flaps_descriptor();
}
template <> struct is_proto_enum< ::Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Mode>() {
  return ::Mode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gcs_5fdata_2eproto
