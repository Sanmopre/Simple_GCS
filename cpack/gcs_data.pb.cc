// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcs_data.proto

#include "gcs_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class GCSDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GCSData> _instance;
} _GCSData_default_instance_;
static void InitDefaultsscc_info_GCSData_gcs_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GCSData_default_instance_;
    new (ptr) ::GCSData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GCSData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GCSData_gcs_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GCSData_gcs_5fdata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gcs_5fdata_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gcs_5fdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gcs_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gcs_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GCSData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GCSData, throttle_1_),
  PROTOBUF_FIELD_OFFSET(::GCSData, throttle_2_),
  PROTOBUF_FIELD_OFFSET(::GCSData, pitch_),
  PROTOBUF_FIELD_OFFSET(::GCSData, roll_),
  PROTOBUF_FIELD_OFFSET(::GCSData, yaw_),
  PROTOBUF_FIELD_OFFSET(::GCSData, flaps_),
  PROTOBUF_FIELD_OFFSET(::GCSData, mode_),
  PROTOBUF_FIELD_OFFSET(::GCSData, target_altitude_),
  PROTOBUF_FIELD_OFFSET(::GCSData, target_speed_),
  PROTOBUF_FIELD_OFFSET(::GCSData, target_vertical_speed_),
  PROTOBUF_FIELD_OFFSET(::GCSData, target_bank_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GCSData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GCSData_default_instance_),
};

const char descriptor_table_protodef_gcs_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016gcs_data.proto\"\352\001\n\007GCSData\022\022\n\nthrottle"
  "_1\030\001 \001(\002\022\022\n\nthrottle_2\030\002 \001(\002\022\r\n\005pitch\030\003 "
  "\001(\002\022\014\n\004roll\030\004 \001(\002\022\013\n\003yaw\030\005 \001(\002\022\025\n\005flaps\030"
  "\006 \001(\0162\006.Flaps\022\023\n\004mode\030\007 \001(\0162\005.Mode\022\027\n\017ta"
  "rget_altitude\030\010 \001(\005\022\024\n\014target_speed\030\t \001("
  "\005\022\035\n\025target_vertical_speed\030\n \001(\005\022\023\n\013targ"
  "et_bank\030\013 \001(\005*-\n\005Flaps\022\013\n\007LANDING\020\000\022\013\n\007T"
  "AKEOFF\020\001\022\n\n\006CRUISE\020\002*\034\n\004Mode\022\n\n\006MANUAL\020\000"
  "\022\010\n\004AUTO\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gcs_5fdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gcs_5fdata_2eproto_sccs[1] = {
  &scc_info_GCSData_gcs_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gcs_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gcs_5fdata_2eproto = {
  false, false, descriptor_table_protodef_gcs_5fdata_2eproto, "gcs_data.proto", 338,
  &descriptor_table_gcs_5fdata_2eproto_once, descriptor_table_gcs_5fdata_2eproto_sccs, descriptor_table_gcs_5fdata_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_gcs_5fdata_2eproto::offsets,
  file_level_metadata_gcs_5fdata_2eproto, 1, file_level_enum_descriptors_gcs_5fdata_2eproto, file_level_service_descriptors_gcs_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gcs_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gcs_5fdata_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Flaps_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcs_5fdata_2eproto);
  return file_level_enum_descriptors_gcs_5fdata_2eproto[0];
}
bool Flaps_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcs_5fdata_2eproto);
  return file_level_enum_descriptors_gcs_5fdata_2eproto[1];
}
bool Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GCSData::InitAsDefaultInstance() {
}
class GCSData::_Internal {
 public:
};

GCSData::GCSData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GCSData)
}
GCSData::GCSData(const GCSData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&throttle_1_, &from.throttle_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_bank_) -
    reinterpret_cast<char*>(&throttle_1_)) + sizeof(target_bank_));
  // @@protoc_insertion_point(copy_constructor:GCSData)
}

void GCSData::SharedCtor() {
  ::memset(&throttle_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_bank_) -
      reinterpret_cast<char*>(&throttle_1_)) + sizeof(target_bank_));
}

GCSData::~GCSData() {
  // @@protoc_insertion_point(destructor:GCSData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GCSData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GCSData::ArenaDtor(void* object) {
  GCSData* _this = reinterpret_cast< GCSData* >(object);
  (void)_this;
}
void GCSData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GCSData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GCSData& GCSData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GCSData_gcs_5fdata_2eproto.base);
  return *internal_default_instance();
}


void GCSData::Clear() {
// @@protoc_insertion_point(message_clear_start:GCSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&throttle_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_bank_) -
      reinterpret_cast<char*>(&throttle_1_)) + sizeof(target_bank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GCSData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float throttle_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          throttle_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float throttle_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          throttle_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Flaps flaps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flaps(static_cast<::Flaps>(val));
        } else goto handle_unusual;
        continue;
      // .Mode mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::Mode>(val));
        } else goto handle_unusual;
        continue;
      // int32 target_altitude = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          target_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          target_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_vertical_speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          target_vertical_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_bank = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          target_bank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GCSData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float throttle_1 = 1;
  if (!(this->throttle_1() <= 0 && this->throttle_1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_throttle_1(), target);
  }

  // float throttle_2 = 2;
  if (!(this->throttle_2() <= 0 && this->throttle_2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_throttle_2(), target);
  }

  // float pitch = 3;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pitch(), target);
  }

  // float roll = 4;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_roll(), target);
  }

  // float yaw = 5;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_yaw(), target);
  }

  // .Flaps flaps = 6;
  if (this->flaps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_flaps(), target);
  }

  // .Mode mode = 7;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_mode(), target);
  }

  // int32 target_altitude = 8;
  if (this->target_altitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_target_altitude(), target);
  }

  // int32 target_speed = 9;
  if (this->target_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_target_speed(), target);
  }

  // int32 target_vertical_speed = 10;
  if (this->target_vertical_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_target_vertical_speed(), target);
  }

  // int32 target_bank = 11;
  if (this->target_bank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_target_bank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSData)
  return target;
}

size_t GCSData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GCSData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float throttle_1 = 1;
  if (!(this->throttle_1() <= 0 && this->throttle_1() >= 0)) {
    total_size += 1 + 4;
  }

  // float throttle_2 = 2;
  if (!(this->throttle_2() <= 0 && this->throttle_2() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch = 3;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float roll = 4;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw = 5;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // .Flaps flaps = 6;
  if (this->flaps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flaps());
  }

  // .Mode mode = 7;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // int32 target_altitude = 8;
  if (this->target_altitude() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_altitude());
  }

  // int32 target_speed = 9;
  if (this->target_speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_speed());
  }

  // int32 target_vertical_speed = 10;
  if (this->target_vertical_speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_vertical_speed());
  }

  // int32 target_bank = 11;
  if (this->target_bank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_bank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GCSData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GCSData)
  GOOGLE_DCHECK_NE(&from, this);
  const GCSData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GCSData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GCSData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GCSData)
    MergeFrom(*source);
  }
}

void GCSData::MergeFrom(const GCSData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GCSData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.throttle_1() <= 0 && from.throttle_1() >= 0)) {
    _internal_set_throttle_1(from._internal_throttle_1());
  }
  if (!(from.throttle_2() <= 0 && from.throttle_2() >= 0)) {
    _internal_set_throttle_2(from._internal_throttle_2());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (from.flaps() != 0) {
    _internal_set_flaps(from._internal_flaps());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.target_altitude() != 0) {
    _internal_set_target_altitude(from._internal_target_altitude());
  }
  if (from.target_speed() != 0) {
    _internal_set_target_speed(from._internal_target_speed());
  }
  if (from.target_vertical_speed() != 0) {
    _internal_set_target_vertical_speed(from._internal_target_vertical_speed());
  }
  if (from.target_bank() != 0) {
    _internal_set_target_bank(from._internal_target_bank());
  }
}

void GCSData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GCSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSData::CopyFrom(const GCSData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GCSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSData::IsInitialized() const {
  return true;
}

void GCSData::InternalSwap(GCSData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GCSData, target_bank_)
      + sizeof(GCSData::target_bank_)
      - PROTOBUF_FIELD_OFFSET(GCSData, throttle_1_)>(
          reinterpret_cast<char*>(&throttle_1_),
          reinterpret_cast<char*>(&other->throttle_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GCSData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GCSData* Arena::CreateMaybeMessage< ::GCSData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GCSData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
