// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drone_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_drone_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_drone_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_drone_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_drone_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_drone_5fdata_2eproto;
class DroneData;
class DroneDataDefaultTypeInternal;
extern DroneDataDefaultTypeInternal _DroneData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DroneData* Arena::CreateMaybeMessage<::DroneData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DroneData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DroneData) */ {
 public:
  inline DroneData() : DroneData(nullptr) {};
  virtual ~DroneData();

  DroneData(const DroneData& from);
  DroneData(DroneData&& from) noexcept
    : DroneData() {
    *this = ::std::move(from);
  }

  inline DroneData& operator=(const DroneData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DroneData& operator=(DroneData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DroneData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DroneData* internal_default_instance() {
    return reinterpret_cast<const DroneData*>(
               &_DroneData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DroneData& a, DroneData& b) {
    a.Swap(&b);
  }
  inline void Swap(DroneData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DroneData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DroneData* New() const final {
    return CreateMaybeMessage<DroneData>(nullptr);
  }

  DroneData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DroneData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DroneData& from);
  void MergeFrom(const DroneData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DroneData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DroneData";
  }
  protected:
  explicit DroneData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_drone_5fdata_2eproto);
    return ::descriptor_table_drone_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAltitudeFieldNumber = 1,
    kSpeedFieldNumber = 2,
    kVerticalSpeedFieldNumber = 3,
    kLatitudeFieldNumber = 4,
    kLongitudeFieldNumber = 5,
    kFuelFieldNumber = 6,
    kTemperatureEngine1FieldNumber = 7,
    kTemperatureEngine2FieldNumber = 8,
    kRpmEngine1FieldNumber = 9,
    kRpmEngine2FieldNumber = 10,
  };
  // int32 altitude = 1;
  void clear_altitude();
  ::PROTOBUF_NAMESPACE_ID::int32 altitude() const;
  void set_altitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_altitude() const;
  void _internal_set_altitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed = 2;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // float vertical_speed = 3;
  void clear_vertical_speed();
  float vertical_speed() const;
  void set_vertical_speed(float value);
  private:
  float _internal_vertical_speed() const;
  void _internal_set_vertical_speed(float value);
  public:

  // float latitude = 4;
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // float longitude = 5;
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // float fuel = 6;
  void clear_fuel();
  float fuel() const;
  void set_fuel(float value);
  private:
  float _internal_fuel() const;
  void _internal_set_fuel(float value);
  public:

  // float temperature_engine_1 = 7;
  void clear_temperature_engine_1();
  float temperature_engine_1() const;
  void set_temperature_engine_1(float value);
  private:
  float _internal_temperature_engine_1() const;
  void _internal_set_temperature_engine_1(float value);
  public:

  // float temperature_engine_2 = 8;
  void clear_temperature_engine_2();
  float temperature_engine_2() const;
  void set_temperature_engine_2(float value);
  private:
  float _internal_temperature_engine_2() const;
  void _internal_set_temperature_engine_2(float value);
  public:

  // int32 rpm_engine_1 = 9;
  void clear_rpm_engine_1();
  ::PROTOBUF_NAMESPACE_ID::int32 rpm_engine_1() const;
  void set_rpm_engine_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rpm_engine_1() const;
  void _internal_set_rpm_engine_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rpm_engine_2 = 10;
  void clear_rpm_engine_2();
  ::PROTOBUF_NAMESPACE_ID::int32 rpm_engine_2() const;
  void set_rpm_engine_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rpm_engine_2() const;
  void _internal_set_rpm_engine_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DroneData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 altitude_;
  float speed_;
  float vertical_speed_;
  float latitude_;
  float longitude_;
  float fuel_;
  float temperature_engine_1_;
  float temperature_engine_2_;
  ::PROTOBUF_NAMESPACE_ID::int32 rpm_engine_1_;
  ::PROTOBUF_NAMESPACE_ID::int32 rpm_engine_2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drone_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DroneData

// int32 altitude = 1;
inline void DroneData::clear_altitude() {
  altitude_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneData::_internal_altitude() const {
  return altitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneData::altitude() const {
  // @@protoc_insertion_point(field_get:DroneData.altitude)
  return _internal_altitude();
}
inline void DroneData::_internal_set_altitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  altitude_ = value;
}
inline void DroneData::set_altitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:DroneData.altitude)
}

// float speed = 2;
inline void DroneData::clear_speed() {
  speed_ = 0;
}
inline float DroneData::_internal_speed() const {
  return speed_;
}
inline float DroneData::speed() const {
  // @@protoc_insertion_point(field_get:DroneData.speed)
  return _internal_speed();
}
inline void DroneData::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void DroneData::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:DroneData.speed)
}

// float vertical_speed = 3;
inline void DroneData::clear_vertical_speed() {
  vertical_speed_ = 0;
}
inline float DroneData::_internal_vertical_speed() const {
  return vertical_speed_;
}
inline float DroneData::vertical_speed() const {
  // @@protoc_insertion_point(field_get:DroneData.vertical_speed)
  return _internal_vertical_speed();
}
inline void DroneData::_internal_set_vertical_speed(float value) {
  
  vertical_speed_ = value;
}
inline void DroneData::set_vertical_speed(float value) {
  _internal_set_vertical_speed(value);
  // @@protoc_insertion_point(field_set:DroneData.vertical_speed)
}

// float latitude = 4;
inline void DroneData::clear_latitude() {
  latitude_ = 0;
}
inline float DroneData::_internal_latitude() const {
  return latitude_;
}
inline float DroneData::latitude() const {
  // @@protoc_insertion_point(field_get:DroneData.latitude)
  return _internal_latitude();
}
inline void DroneData::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void DroneData::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:DroneData.latitude)
}

// float longitude = 5;
inline void DroneData::clear_longitude() {
  longitude_ = 0;
}
inline float DroneData::_internal_longitude() const {
  return longitude_;
}
inline float DroneData::longitude() const {
  // @@protoc_insertion_point(field_get:DroneData.longitude)
  return _internal_longitude();
}
inline void DroneData::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void DroneData::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:DroneData.longitude)
}

// float fuel = 6;
inline void DroneData::clear_fuel() {
  fuel_ = 0;
}
inline float DroneData::_internal_fuel() const {
  return fuel_;
}
inline float DroneData::fuel() const {
  // @@protoc_insertion_point(field_get:DroneData.fuel)
  return _internal_fuel();
}
inline void DroneData::_internal_set_fuel(float value) {
  
  fuel_ = value;
}
inline void DroneData::set_fuel(float value) {
  _internal_set_fuel(value);
  // @@protoc_insertion_point(field_set:DroneData.fuel)
}

// float temperature_engine_1 = 7;
inline void DroneData::clear_temperature_engine_1() {
  temperature_engine_1_ = 0;
}
inline float DroneData::_internal_temperature_engine_1() const {
  return temperature_engine_1_;
}
inline float DroneData::temperature_engine_1() const {
  // @@protoc_insertion_point(field_get:DroneData.temperature_engine_1)
  return _internal_temperature_engine_1();
}
inline void DroneData::_internal_set_temperature_engine_1(float value) {
  
  temperature_engine_1_ = value;
}
inline void DroneData::set_temperature_engine_1(float value) {
  _internal_set_temperature_engine_1(value);
  // @@protoc_insertion_point(field_set:DroneData.temperature_engine_1)
}

// float temperature_engine_2 = 8;
inline void DroneData::clear_temperature_engine_2() {
  temperature_engine_2_ = 0;
}
inline float DroneData::_internal_temperature_engine_2() const {
  return temperature_engine_2_;
}
inline float DroneData::temperature_engine_2() const {
  // @@protoc_insertion_point(field_get:DroneData.temperature_engine_2)
  return _internal_temperature_engine_2();
}
inline void DroneData::_internal_set_temperature_engine_2(float value) {
  
  temperature_engine_2_ = value;
}
inline void DroneData::set_temperature_engine_2(float value) {
  _internal_set_temperature_engine_2(value);
  // @@protoc_insertion_point(field_set:DroneData.temperature_engine_2)
}

// int32 rpm_engine_1 = 9;
inline void DroneData::clear_rpm_engine_1() {
  rpm_engine_1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneData::_internal_rpm_engine_1() const {
  return rpm_engine_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneData::rpm_engine_1() const {
  // @@protoc_insertion_point(field_get:DroneData.rpm_engine_1)
  return _internal_rpm_engine_1();
}
inline void DroneData::_internal_set_rpm_engine_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rpm_engine_1_ = value;
}
inline void DroneData::set_rpm_engine_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rpm_engine_1(value);
  // @@protoc_insertion_point(field_set:DroneData.rpm_engine_1)
}

// int32 rpm_engine_2 = 10;
inline void DroneData::clear_rpm_engine_2() {
  rpm_engine_2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneData::_internal_rpm_engine_2() const {
  return rpm_engine_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneData::rpm_engine_2() const {
  // @@protoc_insertion_point(field_get:DroneData.rpm_engine_2)
  return _internal_rpm_engine_2();
}
inline void DroneData::_internal_set_rpm_engine_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rpm_engine_2_ = value;
}
inline void DroneData::set_rpm_engine_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rpm_engine_2(value);
  // @@protoc_insertion_point(field_set:DroneData.rpm_engine_2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_drone_5fdata_2eproto
